name: Run Python tests
on:
  workflow_call:
    inputs:
      python-version:
        description: The Python version to use
        type: number
        required: false
        default: 3.12
      requirements:
        description: The path to the requirements file
        type: string
        required: false
        default: requirements/dev.txt
      fetch-depth:
        description: Number of commits to fetch
        type: string
        required: false
        default: 1
      pytest-options:
        description: The pytest command-line arguments to use
        type: string
        required: false
      playbook-roles:
        description: The Logikal playbook roles to run (comma-separated list)
        type: string
        required: false
      playbook-vars:
        description: The Logikal playbook variables to set (string-encoded JSON)
        type: string
        required: false
        default: '{}'
      upload-artifacts:
        description: Whether the upload artifacts when tests fail
        type: boolean
        required: false
        default: true
      gcp-testing-workload-identity-provider:
        description: Full identifier of the GitHub workload identity pool provider in Google Cloud
        type: string
        required: false
      gcp-testing-service-account:
        description: Email of the Google Cloud service account used for running tests
        type: string
        required: false
      aws-testing-role:
        description: The ARN of the AWS role used for running tests
        type: string
        required: false
      aws-testing-region:
        description: The AWS region to use for authorization
        type: string
        required: false

concurrency:
  group: ${{ github.workflow }}-python-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  run-tests:
    name: Run tests
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}

      - name: Authenticate to Google Cloud Platform
        uses: google-github-actions/auth@v2
        env:
          RUN_STEP: ${{ inputs.gcp-testing-service-account != '' }}
        if: env.RUN_STEP == 'true'
        with:
          workload_identity_provider: ${{ inputs.gcp-testing-workload-identity-provider }}
          service_account: ${{ inputs.gcp-testing-service-account }}

      - name: Authenticate to Amazon Web Services
        uses: aws-actions/configure-aws-credentials@v4
        env:
          RUN_STEP: ${{ inputs.aws-testing-role != '' }}
        if: env.RUN_STEP == 'true'
        with:
          aws-region: ${{ inputs.aws-testing-region }}
          role-to-assume: ${{ inputs.aws-testing-role }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Run playbooks
        uses: logikal-io/run-logikal-playbook@v2
        if: inputs.playbook-roles != ''
        with:
          roles: ${{ inputs.playbook-roles }}
          vars: ${{ inputs.playbook-vars }}

      - uses: google-github-actions/setup-gcloud@v2
        env:
          RUN_STEP: ${{ inputs.gcp-testing-service-account != '' }}
        if: env.RUN_STEP == 'true'

      - name: Authenticate Docker
        env:
          RUN_STEP: ${{ inputs.gcp-testing-service-account != '' }}
        if: env.RUN_STEP == 'true'
        run: gcloud auth configure-docker --quiet marketplace.gcr.io

      - uses: logikal-io/make-orb@v1
        with:
          requirements: ${{ inputs.requirements }}

      # See https://chromium.googlesource.com/chromium/src/+/main/docs/security/
      # apparmor-userns-restrictions.md
      - name: Add AppArmor profiles
        run: |
          # Chrome
          cat | sudo tee /etc/apparmor.d/chrome-dev <<EOF
          abi <abi/4.0>,
          include <tunables/global>

          profile chrome-dev /@{HOME}/.cache/pytest_logikal/chrome/**/chrome flags=(unconfined) {
            userns,

            include if exists <local/chrome>
          }
          EOF

          # Edge
          cat | sudo tee /etc/apparmor.d/edge-dev <<EOF
          abi <abi/4.0>,
          include <tunables/global>

          profile edge-dev /@{HOME}/.cache/pytest_logikal/edge/**/msedge flags=(unconfined) {
            userns,

            include if exists <local/msedge>
          }
          EOF

          sudo service apparmor reload

      - name: Run pytest
        run: orb --command 'pytest ${{ inputs.pytest-options }}'

      - name: Upload pytest artifacts
        uses: actions/upload-artifact@v4
        if: failure() && inputs.upload-artifacts
        with:
          name: pytest-artifacts
          path: /tmp/pytest-of-runner/
          if-no-files-found: ignore
          retention-days: 7
